<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>南叶の小窝</title><description>欢迎来玩awa</description><link>https://www.nanye404.top/</link><language>zh_CN</language><item><title>RM装甲板识别 - 01 图像读取与显示</title><link>https://www.nanye404.top/posts/rm_opencv_01/</link><guid isPermaLink="true">https://www.nanye404.top/posts/rm_opencv_01/</guid><pubDate>Thu, 23 Oct 2025 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;阶段目标&lt;/strong&gt;: 能读取图片、显示处理结果、保存文件&lt;br /&gt;
&lt;strong&gt;适合人群&lt;/strong&gt;: 刚接触OpenCV的新手&lt;br /&gt;
&lt;strong&gt;预计用时&lt;/strong&gt;: 30分钟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;📚 本阶段核心API清单&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;重要性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cv::imread()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取图片到内存&lt;/td&gt;
&lt;td&gt;⭐⭐⭐ 核心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cv::imshow()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示图片窗口&lt;/td&gt;
&lt;td&gt;⭐⭐⭐ 核心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cv::waitKey()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待按键&lt;/td&gt;
&lt;td&gt;⭐⭐⭐ 核心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cv::imwrite()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;保存图片&lt;/td&gt;
&lt;td&gt;⭐⭐ 常用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cv::Mat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;图像数据类型&lt;/td&gt;
&lt;td&gt;⭐⭐⭐ 核心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cv::VideoCapture&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打开相机/视频&lt;/td&gt;
&lt;td&gt;⭐⭐ 进阶&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;h2&gt;1. cv::imread() - 读取图片&lt;/h2&gt;
&lt;h3&gt;📖 函数原型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cv::Mat cv::imread(const String&amp;amp; filename, int flags = IMREAD_COLOR);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;📋 参数说明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;图片路径（相对或绝对路径）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;读取模式（见下表）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;flags常用值:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cv::IMREAD_COLOR&lt;/code&gt; (默认) - 读取彩色图，忽略透明度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cv::IMREAD_GRAYSCALE&lt;/code&gt; - 转为灰度图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cv::IMREAD_UNCHANGED&lt;/code&gt; - 包含Alpha通道&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;💻 基础用法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;

int main() {
    // 读取彩色图（装甲板识别用这个）
    cv::Mat img = cv::imread(&quot;armor.jpg&quot;, cv::IMREAD_COLOR);
    
    // ⚠️ 必须检查是否读取成功！
    if (img.empty()) {
        std::cout &amp;lt;&amp;lt; &quot;❌ 图片读取失败！&quot; &amp;lt;&amp;lt; std::endl;
        return -1;
    }
    
    // 打印图片信息
    std::cout &amp;lt;&amp;lt; &quot;✅ 图片读取成功&quot; &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &quot;   尺寸: &quot; &amp;lt;&amp;lt; img.cols &amp;lt;&amp;lt; &quot; x &quot; &amp;lt;&amp;lt; img.rows &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &quot;   通道数: &quot; &amp;lt;&amp;lt; img.channels() &amp;lt;&amp;lt; std::endl;
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;🎯 输出示例&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;✅ 图片读取成功
   尺寸: 1280 x 720
   通道数: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;⚠️ 常见错误&lt;/h3&gt;
&lt;h4&gt;错误1: 路径写错&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// ❌ Windows路径没有转义反斜杠
cv::Mat img = cv::imread(&quot;C:\Users\image.jpg&quot;);

// ✅ 正确写法（三种任选）
cv::Mat img = cv::imread(&quot;C:\\Users\\image.jpg&quot;);     // 转义反斜杠
cv::Mat img = cv::imread(&quot;C:/Users/image.jpg&quot;);       // 使用正斜杠
cv::Mat img = cv::imread(R&quot;(C:\Users\image.jpg)&quot;);    // 原始字符串
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;错误2: 忘记检查empty()&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// ❌ 危险！如果文件不存在，后续操作会崩溃
cv::Mat img = cv::imread(&quot;not_exist.jpg&quot;);
cv::imshow(&quot;Window&quot;, img);  // 💥 崩溃

// ✅ 正确写法
cv::Mat img = cv::imread(&quot;not_exist.jpg&quot;);
if (img.empty()) {
    std::cerr &amp;lt;&amp;lt; &quot;文件不存在或格式不支持&quot; &amp;lt;&amp;lt; std::endl;
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;💡 重要知识点&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;OpenCV读取的图片是BGR格式，不是RGB！&lt;/strong&gt;&lt;br /&gt;
这在后续颜色识别时非常重要。如果你要转RGB需要用 &lt;code&gt;cv::cvtColor()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;2. cv::imshow() - 显示图片&lt;/h2&gt;
&lt;h3&gt;📖 函数原型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;void cv::imshow(const String&amp;amp; winname, InputArray mat);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;📋 参数说明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;winname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;窗口名称（自己起名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mat&lt;/td&gt;
&lt;td&gt;要显示的图像&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;💻 基础用法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cv::Mat img = cv::imread(&quot;armor.jpg&quot;);

// 显示图片
cv::imshow(&quot;原图&quot;, img);

// ⚠️ 必须配合waitKey()，否则窗口闪现即消失！
cv::waitKey(0);  // 0表示无限等待，直到按任意键

// 关闭所有窗口
cv::destroyAllWindows();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;💻 显示多个窗口&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cv::Mat img1 = cv::imread(&quot;red_armor.jpg&quot;);
cv::Mat img2 = cv::imread(&quot;blue_armor.jpg&quot;);

cv::imshow(&quot;红方装甲板&quot;, img1);
cv::imshow(&quot;蓝方装甲板&quot;, img2);

cv::waitKey(0);
cv::destroyAllWindows();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;⚠️ 常见错误&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// ❌ 错误：窗口闪一下就消失
cv::imshow(&quot;Window&quot;, img);
// 缺少 waitKey()

// ✅ 正确写法
cv::imshow(&quot;Window&quot;, img);
cv::waitKey(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;3. cv::waitKey() - 等待按键&lt;/h2&gt;
&lt;h3&gt;📖 函数原型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;int cv::waitKey(int delay = 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;📋 参数说明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;delay&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待时间（毫秒），0表示无限等待&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;返回值&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;按下的键的ASCII码，超时返回-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;💻 实用技巧&lt;/h3&gt;
&lt;h4&gt;技巧1: 等待任意键&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cv::imshow(&quot;Image&quot;, img);
cv::waitKey(0);  // 按任意键继续
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;技巧2: 检测特定按键&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cv::imshow(&quot;Image&quot;, img);
int key = cv::waitKey(0);

if (key == 27) {  // ESC键
    std::cout &amp;lt;&amp;lt; &quot;用户取消&quot; &amp;lt;&amp;lt; std::endl;
} else if (key == &apos;s&apos; || key == &apos;S&apos;) {  // S键
    cv::imwrite(&quot;saved.jpg&quot;, img);
    std::cout &amp;lt;&amp;lt; &quot;图片已保存&quot; &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;技巧3: 实时视频显示（30fps）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;while (true) {
    cv::Mat frame = getFrame();  // 获取一帧
    cv::imshow(&quot;Video&quot;, frame);
    
    // 等待33ms（约30fps），按ESC退出
    if (cv::waitKey(33) == 27) break;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;4. cv::Mat - 图像数据类型&lt;/h2&gt;
&lt;h3&gt;📖 核心概念&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cv::Mat&lt;/code&gt; 是OpenCV的核心数据结构，可以理解为一个&lt;strong&gt;多维数组&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2D图像 = 二维矩阵&lt;/li&gt;
&lt;li&gt;彩色图像 = 三维矩阵（宽×高×通道）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;💻 创建Mat对象&lt;/h3&gt;
&lt;h4&gt;方法1: 通过imread创建&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cv::Mat img = cv::imread(&quot;image.jpg&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;方法2: 创建空白图像&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// 创建640×480的黑色图像
cv::Mat black(480, 640, CV_8UC3, cv::Scalar(0, 0, 0));

// 创建白色图像
cv::Mat white(480, 640, CV_8UC3, cv::Scalar(255, 255, 255));

// 创建红色图像
cv::Mat red(480, 640, CV_8UC3, cv::Scalar(0, 0, 255));  // BGR格式！
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;📋 常用属性&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cv::Mat img = cv::imread(&quot;image.jpg&quot;);

// 基本信息
int width = img.cols;      // 宽度（列数）
int height = img.rows;     // 高度（行数）
int channels = img.channels();  // 通道数（1=灰度，3=彩色）
bool isEmpty = img.empty();     // 是否为空

// 数据类型
int type = img.type();     // CV_8UC3 等
int depth = img.depth();   // CV_8U 等

// 内存信息
size_t total = img.total();    // 总像素数 = rows × cols
size_t bytes = img.total() * img.elemSize();  // 占用字节数
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;💻 访问像素值&lt;/h3&gt;
&lt;h4&gt;方法1: at访问（安全但慢）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cv::Mat img = cv::imread(&quot;image.jpg&quot;);

// 访问(100, 200)位置的像素
cv::Vec3b pixel = img.at&amp;lt;cv::Vec3b&amp;gt;(100, 200);
uchar blue = pixel[0];
uchar green = pixel[1];
uchar red = pixel[2];

// 修改像素
img.at&amp;lt;cv::Vec3b&amp;gt;(100, 200) = cv::Vec3b(255, 0, 0);  // 设为蓝色
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;方法2: 指针访问（快但需小心）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;for (int y = 0; y &amp;lt; img.rows; y++) {
    uchar* row = img.ptr&amp;lt;uchar&amp;gt;(y);  // 获取第y行的指针
    for (int x = 0; x &amp;lt; img.cols; x++) {
        uchar b = row[x * 3 + 0];
        uchar g = row[x * 3 + 1];
        uchar r = row[x * 3 + 2];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;📋 Mat类型代码说明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// CV_&amp;lt;bit-depth&amp;gt;{U|S|F}C&amp;lt;channels&amp;gt;
CV_8UC1   // 8位无符号，1通道（灰度图）
CV_8UC3   // 8位无符号，3通道（BGR彩色图）
CV_32FC1  // 32位浮点，1通道
CV_16SC3  // 16位有符号，3通道
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;5. cv::imwrite() - 保存图片&lt;/h2&gt;
&lt;h3&gt;📖 函数原型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;bool cv::imwrite(const String&amp;amp; filename, InputArray img);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;💻 基础用法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cv::Mat img = cv::imread(&quot;input.jpg&quot;);

// 处理图像...

// 保存为JPG（有损压缩）
cv::imwrite(&quot;output.jpg&quot;, img);

// 保存为PNG（无损压缩，推荐保存二值图）
cv::imwrite(&quot;binary.png&quot;, binaryImg);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;💻 设置压缩质量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// JPG质量控制（0-100，默认95）
std::vector&amp;lt;int&amp;gt; jpg_params;
jpg_params.push_back(cv::IMWRITE_JPEG_QUALITY);
jpg_params.push_back(90);  // 质量90%
cv::imwrite(&quot;output.jpg&quot;, img, jpg_params);

// PNG压缩级别（0-9，默认3）
std::vector&amp;lt;int&amp;gt; png_params;
png_params.push_back(cv::IMWRITE_PNG_COMPRESSION);
png_params.push_back(9);  // 最大压缩
cv::imwrite(&quot;output.png&quot;, img, png_params);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;6. cv::VideoCapture - 打开相机/视频&lt;/h2&gt;
&lt;h3&gt;📖 函数原型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cv::VideoCapture cap(int device);         // 打开相机
cv::VideoCapture cap(const String&amp;amp; filename);  // 打开视频文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;💻 打开相机&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;

int main() {
    // 打开默认相机（设备ID=0）
    cv::VideoCapture cap(0);
    
    // 检查是否成功打开
    if (!cap.isOpened()) {
        std::cerr &amp;lt;&amp;lt; &quot;❌ 相机打开失败&quot; &amp;lt;&amp;lt; std::endl;
        return -1;
    }
    
    // 设置相机参数（可选）
    cap.set(cv::CAP_PROP_FRAME_WIDTH, 1280);
    cap.set(cv::CAP_PROP_FRAME_HEIGHT, 720);
    cap.set(cv::CAP_PROP_FPS, 60);
    
    cv::Mat frame;
    while (true) {
        // 读取一帧
        cap.read(frame);
        // 或者: cap &amp;gt;&amp;gt; frame;
        
        if (frame.empty()) {
            std::cerr &amp;lt;&amp;lt; &quot;❌ 无法读取帧&quot; &amp;lt;&amp;lt; std::endl;
            break;
        }
        
        // 显示
        cv::imshow(&quot;Camera&quot;, frame);
        
        // 按ESC退出
        if (cv::waitKey(30) == 27) break;
    }
    
    cap.release();
    cv::destroyAllWindows();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;💻 读取视频文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cv::VideoCapture cap(&quot;video.mp4&quot;);

if (!cap.isOpened()) {
    std::cerr &amp;lt;&amp;lt; &quot;视频文件打开失败&quot; &amp;lt;&amp;lt; std::endl;
    return -1;
}

// 获取视频信息
int fps = cap.get(cv::CAP_PROP_FPS);
int width = cap.get(cv::CAP_PROP_FRAME_WIDTH);
int height = cap.get(cv::CAP_PROP_FRAME_HEIGHT);
int frame_count = cap.get(cv::CAP_PROP_FRAME_COUNT);

std::cout &amp;lt;&amp;lt; &quot;视频信息: &quot; &amp;lt;&amp;lt; width &amp;lt;&amp;lt; &quot;x&quot; &amp;lt;&amp;lt; height 
          &amp;lt;&amp;lt; &quot; @ &quot; &amp;lt;&amp;lt; fps &amp;lt;&amp;lt; &quot;fps, 共&quot; &amp;lt;&amp;lt; frame_count &amp;lt;&amp;lt; &quot;帧&quot; &amp;lt;&amp;lt; std::endl;

cv::Mat frame;
while (cap.read(frame)) {
    cv::imshow(&quot;Video&quot;, frame);
    if (cv::waitKey(1000/fps) == 27) break;  // 按原速播放
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;🎯 本阶段实战练习&lt;/h2&gt;
&lt;h3&gt;练习1: 图片查看器&lt;/h3&gt;
&lt;p&gt;编写一个简单的图片查看器，支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取并显示图片&lt;/li&gt;
&lt;li&gt;按 &lt;code&gt;s&lt;/code&gt; 保存图片副本&lt;/li&gt;
&lt;li&gt;按 &lt;code&gt;ESC&lt;/code&gt; 退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;💡 参考答案&amp;lt;/summary&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;

int main(int argc, char** argv) {
    if (argc &amp;lt; 2) {
        std::cout &amp;lt;&amp;lt; &quot;用法: &quot; &amp;lt;&amp;lt; argv[0] &amp;lt;&amp;lt; &quot; &amp;lt;image_path&amp;gt;&quot; &amp;lt;&amp;lt; std::endl;
        return -1;
    }
    
    cv::Mat img = cv::imread(argv[1]);
    if (img.empty()) {
        std::cerr &amp;lt;&amp;lt; &quot;无法读取图片: &quot; &amp;lt;&amp;lt; argv[1] &amp;lt;&amp;lt; std::endl;
        return -1;
    }
    
    std::cout &amp;lt;&amp;lt; &quot;按 &apos;s&apos; 保存, 按 ESC 退出&quot; &amp;lt;&amp;lt; std::endl;
    
    while (true) {
        cv::imshow(&quot;图片查看器&quot;, img);
        int key = cv::waitKey(0);
        
        if (key == 27) {  // ESC
            break;
        } else if (key == &apos;s&apos; || key == &apos;S&apos;) {
            cv::imwrite(&quot;saved.jpg&quot;, img);
            std::cout &amp;lt;&amp;lt; &quot;已保存到 saved.jpg&quot; &amp;lt;&amp;lt; std::endl;
        }
    }
    
    cv::destroyAllWindows();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;/details&amp;gt;&lt;/p&gt;
&lt;h3&gt;练习2: 相机实时预览&lt;/h3&gt;
&lt;p&gt;实现一个相机预览程序，显示当前FPS&lt;/p&gt;
&lt;p&gt;&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;💡 参考答案&amp;lt;/summary&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;

int main() {
    cv::VideoCapture cap(0);
    if (!cap.isOpened()) {
        std::cerr &amp;lt;&amp;lt; &quot;相机打开失败&quot; &amp;lt;&amp;lt; std::endl;
        return -1;
    }
    
    cv::Mat frame;
    auto last_time = std::chrono::high_resolution_clock::now();
    double fps = 0;
    
    while (true) {
        cap &amp;gt;&amp;gt; frame;
        if (frame.empty()) break;
        
        // 计算FPS
        auto current_time = std::chrono::high_resolution_clock::now();
        double elapsed = std::chrono::duration&amp;lt;double&amp;gt;(current_time - last_time).count();
        fps = 1.0 / elapsed;
        last_time = current_time;
        
        // 在图像上绘制FPS
        std::string fps_text = &quot;FPS: &quot; + std::to_string(int(fps));
        cv::putText(frame, fps_text, cv::Point(10, 30),
                    cv::FONT_HERSHEY_SIMPLEX, 1, cv::Scalar(0, 255, 0), 2);
        
        cv::imshow(&quot;Camera Preview&quot;, frame);
        if (cv::waitKey(1) == 27) break;
    }
    
    cap.release();
    cv::destroyAllWindows();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;/details&amp;gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;✅ 检查清单&lt;/h2&gt;
&lt;p&gt;完成本阶段后，你应该能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] 用 &lt;code&gt;cv::imread()&lt;/code&gt; 读取图片并检查是否成功&lt;/li&gt;
&lt;li&gt;[ ] 用 &lt;code&gt;cv::imshow()&lt;/code&gt; 和 &lt;code&gt;cv::waitKey()&lt;/code&gt; 显示图片&lt;/li&gt;
&lt;li&gt;[ ] 理解Mat对象的基本属性（rows, cols, channels）&lt;/li&gt;
&lt;li&gt;[ ] 用 &lt;code&gt;cv::imwrite()&lt;/code&gt; 保存处理结果&lt;/li&gt;
&lt;li&gt;[ ] 用 &lt;code&gt;cv::VideoCapture&lt;/code&gt; 打开相机并实时显示&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;📚 下一步&lt;/h2&gt;
&lt;p&gt;完成本阶段后，继续学习：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[02-颜色提取]&lt;/strong&gt; - 如何提取红/蓝色灯条&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[04-轮廓检测]&lt;/strong&gt; - 如何找到灯条的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;🔗 参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56&quot;&gt;OpenCV官方文档 - imread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.opencv.org/4.x/d3/d63/classcv_1_1Mat.html&quot;&gt;OpenCV官方文档 - Mat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.opencv.org/4.x/d8/dfe/classcv_1_1VideoCapture.html&quot;&gt;OpenCV官方文档 - VideoCapture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>更新日志</title><link>https://www.nanye404.top/posts/%E6%97%A5%E5%BF%97/</link><guid isPermaLink="true">https://www.nanye404.top/posts/%E6%97%A5%E5%BF%97/</guid><description>这里是更新日志</description><pubDate>Wed, 22 Oct 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;2025-10-22&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;更新了个人简介&lt;/li&gt;
&lt;li&gt;更新了rm笔记&lt;/li&gt;
&lt;li&gt;更新了双指针的框架&lt;/li&gt;
&lt;li&gt;评论没挂服务器所以不能用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2025-10-23&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;更新了快慢指针&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>双指针</title><link>https://www.nanye404.top/posts/twop/</link><guid isPermaLink="true">https://www.nanye404.top/posts/twop/</guid><description>双指针常见技巧</description><pubDate>Wed, 22 Oct 2025 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%8C%E6%8C%87%E9%92%88%E5%9C%A8%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%90%E7%94%A8&quot;&gt;双指针在数组的运用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88&quot;&gt;快慢指针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2&quot;&gt;二分搜索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3&quot;&gt;滑动窗口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9B%9E%E6%96%87/%E5%8F%8D%E8%BD%AC&quot;&gt;回文/反转&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%95%B0%E4%B9%8B%E5%92%8C&quot;&gt;数之和&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%8C%E6%8C%87%E9%92%88%E5%9C%A8%E9%93%BE%E8%A1%A8%E7%9A%84%E8%BF%90%E7%94%A8&quot;&gt;双指针在链表的运用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%90%88%E5%B9%B6&quot;&gt;合并&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%88%86%E8%A7%A3&quot;&gt;分解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B6%E4%BB%96&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;双指针在数组的运用&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2&gt;快慢指针&lt;/h2&gt;
&lt;h3&gt;数组的原地修改&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;力扣第 26 题「删除有序数组中的重复项」，让你在有序数组去重：
https://leetcode.cn/problems/remove-duplicates-from-sorted-array/&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;给你一个&lt;strong&gt;非严格递增排列&lt;/strong&gt;的数组&lt;code&gt;nums&lt;/code&gt; ，请你&lt;strong&gt;原地&lt;/strong&gt;删除重复出现的元素，使每个元素&lt;strong&gt;只出现一次&lt;/strong&gt;，返回删除后数组的新长度。元素的&lt;strong&gt;相对顺序&lt;/strong&gt;应该保持&lt;strong&gt;一致&lt;/strong&gt;。然后返回 &lt;code&gt;nums&lt;/code&gt; 中唯一元素的个数。&lt;/li&gt;
&lt;li&gt;考虑 &lt;code&gt;nums &lt;/code&gt;的唯一元素的数量为 &lt;code&gt;k&lt;/code&gt;。去重后，返回唯一元素的数量 k。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 的前 k 个元素应包含 排序后 的唯一数字。下标 &lt;code&gt;k - 1 &lt;/code&gt;之后的剩余元素可以忽略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判题标准:&lt;/p&gt;
&lt;p&gt;系统会用下面的代码来测试你的题解:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[] nums = [...]; // 输入数组
int[] expectedNums = [...]; // 长度正确的期望答案
int k = removeDuplicates(nums); // 调用
assert k == expectedNums.length;
for (int i = 0; i &amp;lt; k; i++) {
    assert nums[i] == expectedNums[i];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果所有断言都通过，那么您的题解将被&lt;strong&gt;通过&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,1,2]
输出：2, nums = [1,2,_]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4,_,_,_,_,_]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原地&lt;/strong&gt;意味着只能对当前数组进行修改，不能新建一个数组&lt;/li&gt;
&lt;li&gt;这里所需要用到的就是&lt;strong&gt;快慢指针&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;简单来说就是一个快指针去识别，另一个慢指针去操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;  这里指针是广义上的指针，数组的索引也可以是&lt;strong&gt;指针&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;fast&lt;/code&gt; 遇到值为 &lt;code&gt;val &lt;/code&gt;的元素，则直接跳过，否则就赋值给 &lt;code&gt;slow&lt;/code&gt; 指针，并让 &lt;code&gt;slow &lt;/code&gt;前进一步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution {
public:
    int removeDuplicates(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        if (nums.empty()) return 0;

        int slow = 0;
        for (int fast = 1; fast &amp;lt; nums.size(); fast++) {
            if (nums[slow] != nums[fast]) {
                slow++;
                nums[slow] = nums[fast];
            }
        }

        return slow + 1;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;注意这里需要&lt;strong&gt;先&lt;code&gt;slow++&lt;/code&gt;再赋值&lt;/strong&gt;，要不然第一个会被吞掉&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;下面一道题也是快慢指针的思想，如果掌握了前一道题，这题会很简单&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;力扣283移动0&lt;/strong&gt;https://leetcode.cn/problems/move-zeroes/&lt;/li&gt;
&lt;li&gt;给定一个数组 &lt;strong&gt;nums&lt;/strong&gt;，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。&lt;/li&gt;
&lt;li&gt;请注意 ，必须在不复制数组的情况下原地对数组进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = [0,1,0,3,12]
输出: [1,3,12,0,0]
示例 2:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = [0]
输出: [0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我就直接上代码了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution {
public:
    void moveZeroes(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int slow = 0;  // 指向下一个非零应放置的位置
        for (int fast = 0; fast &amp;lt; nums.size(); fast++) {
            if (nums[fast] != 0) {
                nums[slow] = nums[fast];
                slow++;
            }
        }

        // slow 之后的全部置为 0
        for (int i = slow; i &amp;lt; nums.size(); i++) {
            nums[i] = 0;
        }
    }
};

&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;二分搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在我们都玩过的猜数字游戏中，用的就是二分搜素的技巧&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们先看最笨的顺序查找，我们从1-100遍历全部数字，虽然说运气好可能一下会猜中，但是期望的次数还是很多，复杂度为O(n)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是凭感觉找，一样还是要看运气&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果第一次猜50，然后继续一半一半缩小区间，最坏也能在7次内解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何数字来到1-1000000，二分搜索最坏20次就能找到答案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二分搜索的时间复杂度是O(log  N)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面是最基本代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;int binarySearch(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) {
    // 一左一右两个指针相向而行
    int left = 0, right = nums.size() - 1;
    while(left &amp;lt;= right) {
        int mid = (right + left) / 2;
        if(nums[mid] == target)
            return mid; 
        else if (nums[mid] &amp;lt; target)
            left = mid + 1; 
        else if (nums[mid] &amp;gt; target)
            right = mid - 1;
    }
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>装甲板自动识别与位姿估计学习</title><link>https://www.nanye404.top/posts/armor/</link><guid isPermaLink="true">https://www.nanye404.top/posts/armor/</guid><description>一些小笔记</description><pubDate>Wed, 22 Oct 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;目录&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%80%BB%E8%A7%88%E7%B3%BB%E7%BB%9F%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E6%98%AF%E4%BB%80%E4%B9%88&quot;&gt;总览：系统做的事情是什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E9%94%AE%E7%9F%A5%E8%AF%86%E7%82%B9%E9%80%9F%E9%80%9A&quot;&gt;关键知识点速通&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%B8%80%E5%B8%A7%E5%9B%BE%E5%83%8F%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%84%E7%90%86&quot;&gt;端到端流程图（一帧图像如何被处理）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A8%A1%E5%9D%97%E9%80%90%E4%B8%AA%E6%8B%86%E8%A7%A3%E5%90%AB%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5&quot;&gt;模块逐个拆解（含核心代码片段）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;4.1 数字分类器 &lt;code&gt;NumberClassifier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4.2 视觉检测器 &lt;code&gt;Detector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4.3 灯条角点精修 &lt;code&gt;LightCornerCorrector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4.4 位姿估计 &lt;code&gt;ArmorPoseEstimator&lt;/code&gt;（PnP + BA）&lt;/li&gt;
&lt;li&gt;4.5 BA 优化器与图优化算子 &lt;code&gt;BaSolver&lt;/code&gt; / &lt;code&gt;GraphOptimizer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4.6 ROS2 节点 &lt;code&gt;ArmorDetectorNode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E6%95%88%E6%9E%9C%E8%B0%83%E5%8F%82%E6%8C%87%E5%8D%97&quot;&gt;参数如何影响效果（调参指南）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%9E%E6%88%98%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E8%BF%90%E8%A1%8C%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96&quot;&gt;实战：从源码到运行与可视化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E5%AE%9A%E4%BD%8D%E6%80%9D%E8%B7%AF&quot;&gt;常见问题与定位思路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BF%9B%E9%98%B6%E7%BB%83%E4%B9%A0%E9%A2%98%E5%B8%A6%E6%96%B9%E5%90%91%E6%8F%90%E7%A4%BA&quot;&gt;进阶练习题（带方向提示）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9C%AF%E8%AF%AD%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E5%B0%8F%E6%8A%84&quot;&gt;术语与坐标系小抄&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;总览：系统做的事情是什么&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：从相机来的彩色图像中，自动找出“&lt;strong&gt;两根灯条组成的装甲板&lt;/strong&gt;”，&lt;strong&gt;识别装甲数字&lt;/strong&gt;，并估计装甲板在&lt;strong&gt;相机坐标系&lt;/strong&gt;下的三维位姿（位置 + 姿态），最后通过 &lt;strong&gt;ROS2&lt;/strong&gt; 发布结果与可视化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键阶段&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图像预处理 → 二值化轮廓 → &lt;strong&gt;灯条候选&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;灯条几何筛选 &amp;amp; 颜色判定 → &lt;strong&gt;灯条配对成装甲板&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;透视展开中部区域 → &lt;strong&gt;数字分类&lt;/strong&gt;（ONNX 模型）。&lt;/li&gt;
&lt;li&gt;对灯条上下角点做&lt;strong&gt;几何细化&lt;/strong&gt;（提升 PnP 稳定性）。&lt;/li&gt;
&lt;li&gt;用 &lt;strong&gt;PnP 求初解&lt;/strong&gt; → 条件允许时用 **BA（仅优化 yaw）**做小优化。&lt;/li&gt;
&lt;li&gt;封装为 ROS2 节点：&lt;strong&gt;订阅图像/相机内参/TF&lt;/strong&gt;，发布调试图像与 &lt;strong&gt;Marker&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;关键知识点速通&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;a href=&quot;/posts/rm_opencv_01/&quot;&amp;gt;图像读取与显示&amp;lt;/a&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&quot;/posts/rm_opencv_01/&quot;&amp;gt;我的第一篇文章&amp;lt;/a&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&quot;/posts/rm_opencv_01/&quot;&amp;gt;我的第一篇文章&amp;lt;/a&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&quot;/posts/rm_opencv_01/&quot;&amp;gt;我的第一篇文章&amp;lt;/a&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&quot;/posts/rm_opencv_01/&quot;&amp;gt;我的第一篇文章&amp;lt;/a&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&quot;/posts/rm_opencv_01/&quot;&amp;gt;我的第一篇文章&amp;lt;/a&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;端到端流程图（一帧图像如何被处理）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Image(rgb8)
   └─► 预处理(灰度/阈值)
          └─► 轮廓→灯条(Light)
                 └─► 同色 + 几何关系 → 装甲(Armor)
                        ├─► (可选) 灯条角点精修
                        ├─► 透视展开数字ROI → 二值化 → 分类
                        └─► PnP求位姿 → (可选) BA优化yaw
                               └─► 发布Armors + RViz Marker + 调试图像
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;模块逐个拆解（含核心代码片段）&lt;/h2&gt;
&lt;h3&gt;4.1 数字分类器 &lt;code&gt;NumberClassifier&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：从装甲板两根灯条之间裁出数字图（固定尺寸），二值化后喂给 ONNX 分类网络，得到类别与置信度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心：透视展开 + 二值化 + DNN 前向&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 透视展开并裁 ROI（宽度随大小装甲而变）
cv::Mat NumberClassifier::extractNumber(const cv::Mat&amp;amp; src, const Armor&amp;amp; armor) const noexcept {
  static const int light_length = 12, warp_height = 28;
  static const int small_armor_width = 32, large_armor_width = 54;
  static const cv::Size roi_size(20, 28), input_size(28, 28);

  cv::Point2f lights_vertices[4] = {
    armor.left_light.bottom, armor.left_light.top,
    armor.right_light.top,   armor.right_light.bottom
  };
  const int top_light_y    = (warp_height - light_length) / 2 - 1;
  const int bottom_light_y = top_light_y + light_length;
  const int warp_width     = (armor.type == ArmorType::SMALL ? small_armor_width : large_armor_width);
  cv::Point2f target_vertices[4] = {
    {0, bottom_light_y}, {0, top_light_y},
    {warp_width - 1, top_light_y}, {warp_width - 1, bottom_light_y},
  };

  cv::Mat number_image, M = cv::getPerspectiveTransform(lights_vertices, target_vertices);
  cv::warpPerspective(src, number_image, M, cv::Size(warp_width, warp_height));

  // 中部 ROI → 灰度&amp;amp;OTSU → 28x28
  number_image = number_image(cv::Rect((warp_width - roi_size.width) / 2, 0, roi_size.width, roi_size.height));
  cv::cvtColor(number_image, number_image, cv::COLOR_RGB2GRAY);
  cv::threshold(number_image, number_image, 0, 255, cv::THRESH_BINARY | cv::THRESH_OTSU);
  cv::resize(number_image, number_image, input_size);
  return number_image;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// 前向分类 + 结果解码
void NumberClassifier::classify(const cv::Mat&amp;amp;, Armor&amp;amp; armor) noexcept {
  cv::Mat input = armor.number_img / 255.0;  // [0,1]
  cv::Mat blob; cv::dnn::blobFromImage(input, blob);
  mutex_.lock(); net_.setInput(blob); cv::Mat out = net_.forward().clone(); mutex_.unlock();

  double conf; cv::Point idp;
  minMaxLoc(out.reshape(1, 1), nullptr, &amp;amp;conf, nullptr, &amp;amp;idp);
  int label_id = idp.x;
  armor.confidence = conf;
  armor.number     = class_names_[label_id];
  armor.classfication_result = fmt::format(&quot;{}:{:.1f}%&quot;, armor.number, armor.confidence * 100.0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// 过滤：按阈值/忽略列表 + 大小装甲与类别的互斥规则
void NumberClassifier::eraseIgnoreClasses(std::vector&amp;lt;Armor&amp;gt;&amp;amp; armors) noexcept {
  armors.erase(std::remove_if(armors.begin(), armors.end(), [this](const Armor &amp;amp;a) {
    if (a.confidence &amp;lt; threshold) return true;
    for (auto&amp;amp; ig : ignore_classes_) if (a.number == ig) return true;

    bool mismatch = false;
    if (a.type == ArmorType::LARGE)  mismatch = (a.number == &quot;outpost&quot; || a.number == &quot;2&quot; || a.number == &quot;sentry&quot;);
    if (a.type == ArmorType::SMALL)  mismatch = (a.number == &quot;1&quot;      || a.number == &quot;base&quot;);
    return mismatch;
  }), armors.end());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;要点&lt;/strong&gt;：ROI 宽度与装甲尺寸匹配；OTSU 让阈值更稳；&lt;code&gt;blobFromImage&lt;/code&gt; 封装归一化与 NHWC→NCHW。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;4.2 视觉检测器 &lt;code&gt;Detector&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：灰度/阈值 → 轮廓 → 灯条（形状 + 倾角）→ 统计颜色 → 左右同色配对 → 装甲。若有分类器与角点修正器，则并行进行数字分类与角点细化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总体流程&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;Armor&amp;gt; Detector::detect(const cv::Mat&amp;amp; input) noexcept {
  binary_img = preprocessImage(input);               // 灰度+固定阈值
  lights_    = findLights(input, binary_img);        // 轮廓→Light（比例/角度/颜色）
  armors_    = matchLights(lights_);                 // 左右配对 → Armor

  if (!armors_.empty() &amp;amp;&amp;amp; classifier) {
    std::for_each(std::execution::par, armors_.begin(), armors_.end(), [this,&amp;amp;input](Armor&amp;amp; a){
      a.number_img = classifier-&amp;gt;extractNumber(input, a);
      classifier-&amp;gt;classify(input, a);
      if (corner_corrector) corner_corrector-&amp;gt;correctCorners(a, gray_img_);
    });
    classifier-&amp;gt;eraseIgnoreClasses(armors_);
  }
  return armors_;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关键判定：灯条与配对&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 灯条筛选：短长边比 + 倾角
bool Detector::isLight(const Light&amp;amp; l) noexcept {
  float ratio = l.width / l.length;
  bool ratio_ok = light_params.min_ratio &amp;lt; ratio &amp;amp;&amp;amp; ratio &amp;lt; light_params.max_ratio;
  bool angle_ok = l.tilt_angle &amp;lt; light_params.max_angle;
  return ratio_ok &amp;amp;&amp;amp; angle_ok;
}

// 颜色：在轮廓像素中统计R/B强度差（红/蓝）
for (auto&amp;amp; pt: contour) { sum_r += rgb(pt)[0]; sum_b += rgb(pt)[2]; }
if (abs(sum_r - sum_b)/contour.size() &amp;gt; light_params.color_diff_thresh)
  light.color = (sum_r &amp;gt; sum_b ? RED : BLUE);

// 夹灯检测：两灯条外接矩形内是否还“夹”着别的灯条（且排除数字/红点等干扰）
bool containLight(int i, int j, const std::vector&amp;lt;Light&amp;gt;&amp;amp; lights);

// 配对：同色 + X方向扫描 + 中心距窗口（区分大小装甲）+ 两灯条长度相近 + 夹角限制
std::vector&amp;lt;Armor&amp;gt; Detector::matchLights(const std::vector&amp;lt;Light&amp;gt;&amp;amp; lights) noexcept;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;4.3 灯条角点精修 &lt;code&gt;LightCornerCorrector&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：更精确地找到每根灯条的&lt;strong&gt;上下端点&lt;/strong&gt;与&lt;strong&gt;中心/轴向&lt;/strong&gt;，提升 PnP 的 2D-3D 对应精度（在二值化或噪声环境下尤其有用）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以灯条外接框为基础做&lt;strong&gt;适度扩展&lt;/strong&gt;并检查边界；&lt;/li&gt;
&lt;li&gt;对该小区域做&lt;strong&gt;重心与主方向&lt;/strong&gt;估计（亮度加权 + PCA/一阶矩），得到&lt;strong&gt;对称轴&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;沿对称轴的上下方向，以多个平行“扫描线”寻找&lt;strong&gt;亮度突变最大&lt;/strong&gt;的位置作为端点候选，最后求平均。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;要点代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 角点修正入口：宽度太小则跳过，避免噪声
void LightCornerCorrector::correctCorners(Armor&amp;amp; armor, const cv::Mat&amp;amp; gray) {
  constexpr int PASS_OPTIMIZE_WIDTH = 3;
  if (armor.left_light.width  &amp;gt; PASS_OPTIMIZE_WIDTH) { /* 求 axis &amp;amp; 角点 */ }
  if (armor.right_light.width &amp;gt; PASS_OPTIMIZE_WIDTH) { /* 求 axis &amp;amp; 角点 */ }
}

// 沿对称轴寻找“亮度突变最大”的点作为角点（多条平行线，取候选平均）
cv::Point2f LightCornerCorrector::findCorner(const cv::Mat&amp;amp; gray, const Light&amp;amp; light,
                                             const SymmetryAxis&amp;amp; axis, std::string order) {
  // ... 扫描 START~END 的小段，累计亮度差最大处 ...
  // 返回均值点；无候选则返回 (-1,-1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;4.4 位姿估计 &lt;code&gt;ArmorPoseEstimator&lt;/code&gt;（PnP + BA）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：把装甲四角的 2D 像素点与已知 3D 模型点（大/小装甲的真实尺寸）对应，解出 R/t。若 roll 小且开启 BA，则进一步仅在 &lt;strong&gt;yaw&lt;/strong&gt; 维进行图优化，使投影误差更小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心流程&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 1) PnP 初解（solvePnPGeneric 可能返回两组解）
if (pnp_solver_-&amp;gt;solvePnPGeneric(armor.landmarks(), rvecs, tvecs, type_name)) {
  sortPnPResult(armor, rvecs, tvecs);   // 2) 解的选择（误差/roll/灯条倾角→yaw正负）

  cv::Mat rmat; cv::Rodrigues(rvecs[0], rmat);
  Eigen::Matrix3d R = cvToEigen(rmat);
  Eigen::Vector3d t = cvToEigen(tvecs[0]);

  double roll = rotationMatrixToRPY(R_gimbal_camera_ * R)[0] * 180/M_PI;
  if (use_ba_ &amp;amp;&amp;amp; roll &amp;lt; 15) {
    // 3) BA：仅优化 yaw，小幅修正 R 以减小投影误差
    R = ba_solver_-&amp;gt;solveBa(armor, t, R, R_imu_camera);
  }
  // 4) 填充消息（位姿 + 文本）
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;两解选择（直觉）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先看&lt;strong&gt;重投影误差&lt;/strong&gt;与 &lt;strong&gt;roll&lt;/strong&gt;（太差的解直接放弃切换）；&lt;/li&gt;
&lt;li&gt;再用&lt;strong&gt;灯条在像面上的整体倾斜&lt;/strong&gt;来判断当前&lt;strong&gt;yaw 的正负是否“合理”&lt;/strong&gt;，必要时对调解。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;4.5 BA 优化器与图优化算子 &lt;code&gt;BaSolver&lt;/code&gt; / &lt;code&gt;GraphOptimizer&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;思想&lt;/strong&gt;：只把&lt;strong&gt;装甲 yaw&lt;/strong&gt; 当成优化变量（一个顶点 &lt;code&gt;VertexYaw&lt;/code&gt;），装甲的 3D 角点为固定顶点。观测为每个角点在图像里的像素位置，误差就是&lt;strong&gt;观测像素&lt;/strong&gt;减去&lt;strong&gt;投影像素&lt;/strong&gt;。这样 BA 既轻量又能稳住姿态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构图与优化&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 填图：一个 yaw 顶点 + 四个固定的 3D 顶点 + 四条投影误差边（带 Huber 鲁棒核）
VertexYaw* v_yaw = new VertexYaw(); v_yaw-&amp;gt;setEstimate(initial_armor_yaw);
for (i in 4 corners) {
  VertexPointXYZ* vp = new VertexPointXYZ(); vp-&amp;gt;setFixed(true);
  EdgeProjection* e = new EdgeProjection(R_camera_imu, R_pitch, t, K);
  e-&amp;gt;setVertex(0, v_yaw); e-&amp;gt;setVertex(1, vp);
  e-&amp;gt;setMeasurement(pixel_observation);
  e-&amp;gt;setRobustKernel(new g2o::RobustKernelHuber);
}
optimizer.initializeOptimization(); optimizer.optimize(20);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// 自定义顶点增量：在 SO3 上用李代数更新 yaw，避免角度跳变
void VertexYaw::oplusImpl(const double* update) {
  Sophus::SO3d R_yaw = Sophus::SO3d::exp({0,0,update[0]}) * Sophus::SO3d::exp({0,0,_estimate});
  _estimate = R_yaw.log()(2);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// 投影边误差：像素观测 - 投影(R_camera_imu * R_yaw * R_pitch * P + t)
void EdgeProjection::computeError() {
  double yaw = static_cast&amp;lt;VertexYaw*&amp;gt;(_vertices[0])-&amp;gt;estimate();
  Sophus::SO3d R = R_camera_imu_ * Sophus::SO3d::exp({0,0,yaw}) * R_pitch_;
  Eigen::Vector3d p = R * P3D + t_;
  Eigen::Vector2d proj = (K_ * (p / p.z())).head&amp;lt;2&amp;gt;();
  _error = obs - proj;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;4.6 ROS2 节点 &lt;code&gt;ArmorDetectorNode&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：把检测 → 分类 →（可选）角点修正 → PnP/BA → 发布可视化，全流程在 ROS2 中跑起来。负责：参数、订阅/发布、TF、调试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节点初始化（节选）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 读取参数，初始化 Detector、NumberClassifier、LightCornerCorrector
int binary_thres = declare_parameter(&quot;binary_thres&quot;, 160);
Detector::LightParams l_params = {.min_ratio=0.08, .max_ratio=0.4, .max_angle=40.0, .color_diff_thresh=25};
Detector::ArmorParams a_params = { .min_light_ratio=0.6, .min_small_center_distance=0.8, .max_small_center_distance=3.2,
                                   .min_large_center_distance=3.2, .max_large_center_distance=5.0, .max_angle=35.0 };
detector_ = std::make_unique&amp;lt;Detector&amp;gt;(binary_thres, EnemyColor::RED, l_params, a_params);

auto model_path = utils::URLResolver::getResolvedPath(&quot;package://armor_detector/model/lenet.onnx&quot;);
auto label_path = utils::URLResolver::getResolvedPath(&quot;package://armor_detector/model/label.txt&quot;);
double threshold = declare_parameter(&quot;classifier_threshold&quot;, 0.7);
auto ignores = declare_parameter&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;(&quot;ignore_classes&quot;, {&quot;negative&quot;});
detector_-&amp;gt;classifier = std::make_unique&amp;lt;NumberClassifier&amp;gt;(model_path, label_path, threshold, ignores);

bool use_pca = declare_parameter(&quot;use_pca&quot;, true);
if (use_pca) detector_-&amp;gt;corner_corrector = std::make_unique&amp;lt;LightCornerCorrector&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;图像回调（节选）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 1) TF: odom → 相机的旋转矩阵（IMU→Camera）
auto odom_to_cam = tf2_buffer_-&amp;gt;lookupTransform(odom_frame_, img_msg-&amp;gt;header.frame_id, img_msg-&amp;gt;header.stamp, 10ms);
Eigen::Matrix3d imu_to_camera = tf2MatrixFrom(odom_to_cam.transform.rotation);

// 2) 检测 + 分类 + 角点修正
auto armors = detector_-&amp;gt;detect(cv_bridge::toCvShare(img_msg, &quot;rgb8&quot;)-&amp;gt;image);

// 3) PnP/BA 提取位姿
armors_msg_.armors = armor_pose_estimator_-&amp;gt;extractArmorPoses(armors, imu_to_camera);

// 4) 可视化与发布：Marker / 调试图像 / Armors
publishMarkersAndDebugImages(...);
armors_pub_-&amp;gt;publish(armors_msg_);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;参数如何影响效果（调参指南）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binary_thres&lt;/code&gt;：阈值高→噪点少但灯条可能断；阈值低→连通域粘连。先打开调试图像话题观察再调。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;light.min_ratio / max_ratio / max_angle&lt;/code&gt;：控制灯条的“细长”和“近垂直”程度；误检多就收紧，漏检多就放宽。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;light.color_diff_thresh&lt;/code&gt;：越大越“保守”地判断颜色；太小会把杂散光当成红/蓝。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;armor.*_center_distance&lt;/code&gt;：两灯条中心距窗口；与焦距/距离有关，镜头变化后要重调。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classifier_threshold / ignore_classes&lt;/code&gt;：分类阈值与忽略类，先松后紧，结合实测混淆再收敛。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_pca&lt;/code&gt;：角点修正，噪声环境或分辨率不高时常有帮助。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_ba&lt;/code&gt;：轻量的 yaw 优化，能减抖、稳姿态；但在极端视角下可能收益有限。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;实战：从源码到运行与可视化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;准备&lt;/strong&gt;：相机话题 &lt;code&gt;image_raw&lt;/code&gt;、&lt;code&gt;camera_info&lt;/code&gt;，并确认 TF 链路（&lt;code&gt;odom → camera&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动节点&lt;/strong&gt;：加载参数（上面提到的阈值与窗口）并打开 &lt;code&gt;debug&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RViz&lt;/strong&gt;：添加 &lt;code&gt;MarkerArray&lt;/code&gt; 订阅 &lt;code&gt;armor_detector/marker&lt;/code&gt;；把调试图像话题（&lt;code&gt;binary_img/number_img/result_img&lt;/code&gt;）也开出来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察与调整&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;先让&lt;strong&gt;灯条候选&lt;/strong&gt;稳定 → 再看&lt;strong&gt;配对&lt;/strong&gt;是否合理 → 最后看&lt;strong&gt;数字分类&lt;/strong&gt;与&lt;strong&gt;位姿&lt;/strong&gt;是否稳定。&lt;/li&gt;
&lt;li&gt;逐项微调参数，记录每项调整对召回/精度的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;常见问题与定位思路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;灯条“夹灯”/误配对&lt;/strong&gt;：检查 &lt;code&gt;containLight&lt;/code&gt; 规则与数字/红点宽度过滤；适当提高 &lt;code&gt;color_diff_thresh&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分类不稳&lt;/strong&gt;：对比 &lt;code&gt;number_img&lt;/code&gt; 是否干净；检查 ROI 宽度是否与大/小装甲一致；适当调阈值或忽略类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;位姿“翻面”&lt;/strong&gt;：理解 &lt;code&gt;sortPnPResult&lt;/code&gt; 的选择逻辑（误差、roll、灯条倾角与 yaw 正负），必要时在近景贴纸纹理上做辅助。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;姿态抖动&lt;/strong&gt;：开启 &lt;code&gt;use_ba&lt;/code&gt;；或在 &lt;code&gt;LightCornerCorrector&lt;/code&gt; 中加大候选条数。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;进阶练习题（带方向提示）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;把阈值改成自适应&lt;/strong&gt;：尝试 &lt;code&gt;cv::adaptiveThreshold&lt;/code&gt; 或根据区域亮度动态调 &lt;code&gt;binary_thres&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加入时序稳定&lt;/strong&gt;：在 &lt;code&gt;Detector&lt;/code&gt; 输出上做跟踪（Kalman/匈牙利匹配），让数字与姿态在帧间更稳。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据增强与再训练&lt;/strong&gt;：对 &lt;code&gt;number_img&lt;/code&gt; 做随机仿射/噪声增强，微调 ONNX 模型，观察混淆类的改善。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多目标选择策略&lt;/strong&gt;：当同屏多块装甲时，基于 &lt;code&gt;distance_to_image_center&lt;/code&gt;、置信度或历史 ID 选择目标。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;术语与坐标系小抄&lt;/h2&gt;
</content:encoded></item><item><title>视频测试</title><link>https://www.nanye404.top/posts/video/</link><guid isPermaLink="true">https://www.nanye404.top/posts/video/</guid><description>视频测试。</description><pubDate>Tue, 21 Oct 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;这是视频测试&lt;/p&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;h2&gt;Bilibili&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1fK4y1s7Qf&amp;amp;p=1&amp;amp;autoplay=0&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; &amp;amp;autoplay=0&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content:encoded></item></channel></rss>